import avaTest, { TestInterface } from 'ava';
import { RequestOptions } from 'node:https';
import sinon, { SinonStub } from 'sinon';
import Request from '../lib/request';

type TestContext = { req: Request };

const test = avaTest as TestInterface<TestContext>;

// setup & fixture data
const siteid = '123';
const apikey = 'abc';
const uri = 'https://track.customer.io/api/v1/customers/1';
const data = { first_name: 'Bruce', last_name: 'Wayne' };
const auth = `Basic ${Buffer.from(`${siteid}:${apikey}`).toString('base64')}`;
const baseOptions = {
  uri,
  headers: {
    Authorization: auth,
    'Content-Type': 'application/json',
  },
};
const putOptions = Object.assign({}, baseOptions, {
  method: 'PUT',
  body: JSON.stringify(data),
});

test.beforeEach((t) => {
  t.context.req = new Request({ siteid: '123', apikey: 'abc' }, { timeout: 5000 });
});

// tests begin here
test('constructor sets all properties correctly', (t) => {
  t.is(t.context.req.siteid, '123');
  t.is(t.context.req.apikey, 'abc');
  t.deepEqual(t.context.req.defaults, { timeout: 5000 });
  t.is(t.context.req.auth, auth);
});

test('constructor sets default timeout correctly', (t) => {
  const req = new Request({ siteid, apikey });
  t.deepEqual(req.defaults, { timeout: 10000 });
});

test('#options returns a correctly formatted object', (t) => {
  const expectedOptions = Object.assign(baseOptions, { method: 'POST' });
  const resultOptions = t.context.req.options(uri, 'POST');

  t.deepEqual(resultOptions, expectedOptions);
});

test('#handler returns a promise', (t) => {
  const promise = t.context.req.handler(putOptions);
  (t.context.req as any).request = () => {};
  t.is(promise.constructor.name, 'Promise');
});

test('#handler makes a request and resolves a promise on success', async (t) => {
  const body = {};
  (t.context.req as any).request = (_: RequestOptions, cb: (...args: any[]) => unknown) => {
    cb(null, { statusCode: 200 }, JSON.stringify(body));
  };

  try {
    const res = await t.context.req.handler(putOptions);
    t.deepEqual(res, body);
  } catch {
    t.fail();
  }
});

test('#handler makes a request and rejects with an error on failure', async (t) => {
  const customOptions = {
    ...baseOptions,
    ...{
      uri: 'https://track.customer.io/api/v1/customers/1/events',
      body: JSON.stringify({ title: 'The Batman' }),
    },
  };

  const message = 'test error message';
  const body = { meta: { error: message } };

  (t.context.req as any).request = (_: RequestOptions, cb: (...args: any[]) => unknown) => {
    cb(null, { statusCode: 400 }, JSON.stringify(body));
  };

  try {
    await t.context.req.handler(customOptions);

    t.fail();
  } catch (err) {
    t.is(err.message, message);
  }
});

test('#handler makes a request and rejects with `null` as body', async (t) => {
  const customOptions = Object.assign({}, baseOptions, {
    uri: 'https://track.customer.io/api/v1/customers/1/events',
    body: JSON.stringify({ title: 'The Batman' }),
  });

  (t.context.req as any).request = (_: RequestOptions, cb: (...args: any[]) => unknown) => {
    cb(null, { statusCode: 500 });
  };

  try {
    await t.context.req.handler(customOptions);

    t.fail();
  } catch (err) {
    t.is(err.message, 'Unknown error');
  }
});

test('#handler makes a request and rejects with a bad JSON response', async (t) => {
  const customOptions = Object.assign({}, baseOptions, {
    uri: 'https://track.customer.io/api/v1/customers/1/events',
    body: JSON.stringify({ title: 'The Batman' }),
  });

  (t.context.req as any).request = (_: RequestOptions, cb: (...args: any[]) => unknown) => {
    cb(null, { statusCode: 200 }, '<html></html>');
  };

  try {
    await t.context.req.handler(customOptions);

    t.fail();
  } catch (err) {
    t.is(
      err.message,
      'Unable to parse JSON. Error: SyntaxError: Unexpected token < in JSON at position 0 \nBody:\n <html></html>',
    );
  }
});

test('#handler makes a request and rejects with timeout error', async (t) => {
  const customOptions = Object.assign({}, baseOptions, {
    method: 'PUT',
    body: JSON.stringify(data),
    timeout: 1,
  });

  try {
    await t.context.req.handler(customOptions);

    t.fail();
  } catch (err) {
    t.is(err.message, 'ETIMEDOUT');
  }
});

test('#put calls the handler, makes PUT request with the correct args', (t) => {
  sinon.stub(t.context.req, 'handler');
  t.context.req.put(uri, data);
  t.truthy((t.context.req.handler as SinonStub).calledWith(putOptions));
});

test('#put calls the handler, makes PUT request with default data', (t) => {
  sinon.stub(t.context.req, 'handler');
  t.context.req.put(uri);
  t.truthy((t.context.req.handler as SinonStub).calledWith({ ...putOptions, body: JSON.stringify({}) }));
});

test('#put returns the promise generated by the handler', (t) => {
  const promise = t.context.req.put(uri, data);
  t.is(promise.constructor.name, 'Promise');
});

const deleteOptions = Object.assign({}, baseOptions, { method: 'DELETE' });

test('#destroy calls the handler, makes a DELETE request with the correct args', (t) => {
  sinon.stub(t.context.req, 'handler');
  t.context.req.destroy(uri);
  t.truthy((t.context.req.handler as SinonStub).calledWith(deleteOptions));
});

test('#destroy returns the promise generated by the handler', (t) => {
  const promise = t.context.req.destroy(uri);
  t.is(promise.constructor.name, 'Promise');
});

const postOptions = Object.assign({}, baseOptions, {
  method: 'POST',
  body: JSON.stringify(data),
});

test('#post calls the handler, makes a POST request with the correct args', (t) => {
  sinon.stub(t.context.req, 'handler');
  t.context.req.post(uri, data);
  t.truthy((t.context.req.handler as SinonStub).calledWith(postOptions));
});

test('#post returns the promise generated by the handler', (t) => {
  const promise = t.context.req.post(uri);
  t.is(promise.constructor.name, 'Promise');
});
